// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    return $.FormCheck.Errors = (function() {

      function Errors(form) {
        this.formChecker = form;
        this.clear();
      }

      Errors.prototype.clear = function() {
        return this.errors = {};
      };

      Errors.prototype.add = function(field, message, options) {
        var _base, _ref;
        if (options == null) {
          options = {};
        }
        if (message == null) {
          message = ":invalid";
        }
        if ((_ref = (_base = this.errors)[field]) == null) {
          _base[field] = [];
        }
        if (options.message != null) {
          message = options.message;
        }
        message = this.generateMessage(message, options);
        message = message.simpleTemplateReplace(options);
        return this.errors[field].push(message);
      };

      Errors.prototype.attributesWithErrors = function() {
        var attribute, attributes, errors, _ref;
        attributes = [];
        _ref = this.errors;
        for (attribute in _ref) {
          errors = _ref[attribute];
          if (errors.length > 0) {
            attributes.push(attribute);
          }
        }
        return attributes;
      };

      Errors.prototype.on = function(attribute) {
        var _base, _ref;
        if ((_ref = (_base = this.errors)[attribute]) == null) {
          _base[attribute] = [];
        }
        return this.errors[attribute];
      };

      Errors.prototype.each = function(fn) {
        var attribute, error, errors, _ref, _results;
        _ref = this.errors;
        _results = [];
        for (attribute in _ref) {
          errors = _ref[attribute];
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = errors.length; _i < _len; _i++) {
              error = errors[_i];
              _results1.push(fn(attribute, error));
            }
            return _results1;
          })());
        }
        return _results;
      };

      Errors.prototype.size = function() {
        var attribute, messages, sum, _ref;
        sum = 0;
        _ref = this.errors;
        for (attribute in _ref) {
          messages = _ref[attribute];
          sum += messages.length;
        }
        return sum;
      };

      Errors.prototype.fullMessages = function() {
        var messages,
          _this = this;
        messages = [];
        this.each(function(attribute, message) {
          attribute = _this.formChecker.field(attribute).label();
          return messages.push("" + attribute + " " + message);
        });
        return messages;
      };

      Errors.prototype.generateMessage = function(message) {
        var match;
        if (match = message.match(/^:(.+)/)) {
          return $.FormCheck.i18n.translate("errors.messages." + match[1], this.formChecker.options.language);
        } else {
          return message;
        }
      };

      return Errors;

    })();
  })(jQuery);

}).call(this);

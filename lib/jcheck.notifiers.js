// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($) {
    $.FormCheck.Notifiers = {};
    $.FormCheck.Notifiers.create = function(name, object, base) {
      var className, notifier;
      object = $.extend({
        constructor: function() {},
        focus: function() {
          return this.notify.apply(this, arguments);
        },
        blur: function() {},
        notify: function() {}
      }, object || {});
      if (base == null) {
        base = $.FormCheck.Notifiers.Base;
      }
      className = name.camelize() + "Notifier";
      notifier = (function(_super) {

        __extends(notifier, _super);

        function notifier() {
          notifier.__super__.constructor.apply(this, arguments);
          this.constructor.apply(this, arguments);
        }

        return notifier;

      })(base);
      $.extend(notifier.prototype, object);
      notifier.kind = name;
      $.FormCheck.Notifiers[className] = notifier;
      return notifier;
    };
    $.FormCheck.findNotifier = function(kind) {
      var name, notifier, _ref;
      _ref = $.FormCheck.Notifiers;
      for (name in _ref) {
        notifier = _ref[name];
        if (notifier.kind === kind) {
          return notifier;
        }
      }
    };
    $.FormCheck.Notifiers.Base = (function() {

      function Base(form) {
        this.form = form;
      }

      Base.prototype.focus = function(attribute) {};

      Base.prototype.notify = function(attribute) {};

      Base.prototype.blur = function(attribute) {};

      return Base;

    })();
    $.FormCheck.Notifiers.DialogBase = (function(_super) {

      __extends(DialogBase, _super);

      function DialogBase() {
        return DialogBase.__super__.constructor.apply(this, arguments);
      }

      DialogBase.prototype.populateDialog = function(dialog, messages) {
        var html, m, _i, _len;
        html = "<ul>";
        for (_i = 0, _len = messages.length; _i < _len; _i++) {
          m = messages[_i];
          html += "<li>* " + m + "</li>";
        }
        html += "</ul>";
        return dialog.html(html);
      };

      return DialogBase;

    })($.FormCheck.Notifiers.Base);
    $.FormCheck.Notifiers.NotificationDialog = (function(_super) {

      __extends(NotificationDialog, _super);

      function NotificationDialog(form, options) {
        NotificationDialog.__super__.constructor.call(this, form);
        this.options = $.extend({
          autocloseIn: 4000
        }, options || {});
      }

      NotificationDialog.prototype.notify = function() {
        var dialog;
        dialog = this.generateDialog();
        dialog.css({
          left: "-1000px"
        });
        this.populateDialog(dialog, this.form.errors.fullMessages());
        dialog.css({
          "margin-top": "-" + (dialog.outerHeight() + 10) + "px",
          left: "50%",
          "margin-left": "-" + (Math.round(dialog.outerWidth() / 2)) + "px"
        });
        dialog.show();
        dialog.animate({
          "margin-top": "0px"
        });
        return dialog.mouseout();
      };

      NotificationDialog.prototype.closeDialog = function() {
        return this.currentDialog.animate({
          "margin-top": "-" + (this.currentDialog.outerHeight() + 10) + "px"
        }, {
          complete: function() {
            return $(this).hide();
          }
        });
      };

      NotificationDialog.prototype.generateDialog = function() {
        var dialog, dialogId,
          _this = this;
        if ($.FormCheck.Notifiers.NotificationDialog.dialogTimer) {
          clearTimeout($.FormCheck.Notifiers.NotificationDialog.dialogTimer);
        }
        dialogId = "jcheck-error-dialog";
        $("#" + dialogId).remove();
        dialog = $(document.createElement("div"));
        dialog.attr("id", dialogId);
        this.currentDialog = dialog;
        if ($.browser.msie && parseInt($.browser.version) < 7) {
          dialog.addClass("ie-fixed");
        }
        dialog.click(function() {
          return _this.closeDialog();
        });
        if (this.options.autocloseIn) {
          dialog.mouseover(function() {
            if ($.FormCheck.Notifiers.NotificationDialog.dialogTimer) {
              return clearTimeout($.FormCheck.Notifiers.NotificationDialog.dialogTimer);
            }
          });
          dialog.mouseout(function() {
            var callback, self;
            self = _this;
            callback = function() {
              return self.closeDialog();
            };
            return $.FormCheck.Notifiers.NotificationDialog.dialogTimer = setTimeout(callback, _this.options.autocloseIn);
          });
        }
        $(document.body).append(dialog);
        return dialog;
      };

      return NotificationDialog;

    })($.FormCheck.Notifiers.DialogBase);
    $.FormCheck.Notifiers.NotificationDialog.dialogTimer = 0;
    $.FormCheck.Notifiers.NotificationDialog.kind = "notificationDialog";
    $.FormCheck.Notifiers.TipBalloons = (function(_super) {

      __extends(TipBalloons, _super);

      function TipBalloons(form) {
        TipBalloons.__super__.constructor.call(this, form);
        this.balloons = {};
      }

      TipBalloons.prototype.focus = function(attribute, evt) {
        return this.notify(attribute, evt || null);
      };

      TipBalloons.prototype.notify = function(attribute, evt) {
        var dialog, element, messages, offset, populateAndReposition,
          _this = this;
        dialog = this.dialogForAttribute(attribute);
        messages = this.form.errors.on(attribute);
        if (messages.isEqual(dialog.messages)) {
          return;
        }
        element = evt && evt.target ? $(evt.target) : this.form.element;
        offset = element.offset();
        populateAndReposition = function(messages) {
          _this.populateDialog(dialog, messages);
          return dialog.css({
            top: "" + (offset.top - dialog.outerHeight()) + "px",
            left: "" + (offset.left + Math.round(element.outerWidth() * 0.9)) + "px"
          });
        };
        if (messages.length > 0) {
          if (dialog.messages && dialog.messages.length > 0) {
            populateAndReposition(messages);
          } else {
            dialog.css({
              left: "-1000px",
              top: "-1000px"
            });
            dialog.hide();
            populateAndReposition(messages);
            dialog.fadeIn("fast");
          }
        } else {
          this.closeDialog(attribute);
        }
        return dialog.messages = messages;
      };

      TipBalloons.prototype.blur = function(attribute) {
        return this.closeDialog(attribute);
      };

      TipBalloons.prototype.dialogForAttribute = function(attribute) {
        if (!this.balloons[attribute]) {
          this.balloons[attribute] = this.generateDialog();
        }
        return this.balloons[attribute];
      };

      TipBalloons.prototype.closeDialog = function(attribute) {
        var dialog;
        dialog = this.dialogForAttribute(attribute);
        dialog.messages = null;
        return dialog.fadeOut("fast");
      };

      TipBalloons.prototype.generateDialog = function() {
        var arrow, contentArea, dialog;
        dialog = null;
        dialog = $(document.createElement("div"));
        dialog.addClass("jcheck-inline-balloon-tip");
        dialog.css({
          position: "absolute",
          top: "-1000px",
          left: "-1000px"
        });
        contentArea = $(document.createElement("div"));
        contentArea.addClass("content");
        dialog.append(contentArea);
        arrow = this.generateArrow();
        dialog.append(arrow);
        $(document.body).append(dialog);
        return dialog;
      };

      TipBalloons.prototype.generateArrow = function() {
        var center, container, i, line, maxWidth, x;
        i = 10;
        container = $(document.createElement("div"));
        container.addClass("arrow-container");
        center = i / 2;
        maxWidth = null;
        while (i > 0) {
          x = i * 2 - center;
          if (x < 0) {
            x = center + x - 1;
          }
          line = $(document.createElement("div"));
          line.addClass("line" + i);
          line.css({
            'font-size': 0,
            width: "" + x + "px",
            height: "1px",
            margin: "0 auto"
          });
          container.append(line);
          i -= 1;
        }
        return container;
      };

      TipBalloons.prototype.populateDialog = function(dialog, messages) {
        return TipBalloons.__super__.populateDialog.call(this, dialog.find(".content"), messages);
      };

      return TipBalloons;

    })($.FormCheck.Notifiers.DialogBase);
    return $.FormCheck.Notifiers.TipBalloons.kind = "tipBalloons";
  })(jQuery);

}).call(this);

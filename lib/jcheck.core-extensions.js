// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    Array.wrap = function(data) {
      if ($.isArray(data)) {
        return data;
      } else {
        return [data];
      }
    };
    Array.prototype.extractOptions = function() {
      if ($.isPlainObject(this[this.length - 1])) {
        return this.pop();
      } else {
        return {};
      }
    };
    Array.prototype.isEqual = function(other) {
      var key, value, _i, _len;
      if (!$.isArray(other)) {
        return false;
      }
      if (this.length !== other.length) {
        return false;
      }
      for (key = _i = 0, _len = this.length; _i < _len; key = ++_i) {
        value = this[key];
        if (value !== other[key]) {
          return false;
        }
      }
      return true;
    };
    String.prototype.simpleTemplateReplace = function(options) {
      var key, replacement, text;
      text = this + "";
      for (key in options) {
        replacement = options[key];
        text = text.replace("%{" + key + "}", replacement);
      }
      return text;
    };
    String.prototype.ucFirst = function() {
      return this.charAt(0).toUpperCase() + this.substr(1);
    };
    String.prototype.camelize = function() {
      var parts, str;
      parts = (function() {
        var _i, _len, _ref, _results;
        _ref = this.split("_");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          str = _ref[_i];
          _results.push(str.ucFirst());
        }
        return _results;
      }).call(this);
      return parts.join('');
    };
    String.prototype.snakeCase = function() {
      var str;
      str = this.replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2");
      str = str.replace(/([a-z\d])([A-Z])/g, "$1_$2");
      return str.toLowerCase();
    };
    $.isString = function(value) {
      return (typeof value) === "string";
    };
    window.isBlank = function(object) {
      if (object == null) {
        return true;
      }
      if ($.isString(object) && object.replace(/^\s+|\s+$/, '').length === 0) {
        return true;
      }
      return false;
    };
    window.deleteObjectProperty = function(object, property) {
      var value;
      value = object[property] || null;
      delete object[property];
      return value;
    };
    window.objectWithoutProperties = function(object, properties) {
      var obj, property, _i, _len;
      obj = $.extend({}, object);
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        delete obj[property];
      }
      return obj;
    };
    window.extractKeys = function(object) {
      var key, _results;
      _results = [];
      for (key in object) {
        _results.push(key);
      }
      return _results;
    };
    window.sliceObject = function(object, keys) {
      var key, obj, _i, _len;
      obj = {};
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (object[key] != null) {
          obj[key] = object[key];
        }
      }
      return obj;
    };
    window.sliceObjectAndRemove = function(object, keys) {
      var k, obj, v;
      obj = {};
      for (k in object) {
        v = object[k];
        if ($.inArray(k, keys) === -1) {
          obj[k] = object[k];
          delete object[k];
        }
      }
      return obj;
    };
    if (window.console == null) {
      return window.console = {
        log: function() {},
        dir: function() {},
        error: function() {}
      };
    }
  })(jQuery);

}).call(this);

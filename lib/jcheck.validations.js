// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  (function($) {
    $.FormCheck.Validations = {};
    $.FormCheck.findValidator = function(kind) {
      var k, validator, _ref;
      _ref = $.FormCheck.Validations;
      for (k in _ref) {
        validator = _ref[k];
        if (validator.kind === kind) {
          return validator;
        }
      }
      return null;
    };
    $.FormCheck.Validator = (function() {

      function Validator(options) {
        this.options = options;
      }

      Validator.prototype.kind = function() {};

      Validator.prototype.validate = function(form) {};

      return Validator;

    })();
    $.FormCheck.EachValidator = (function(_super) {

      __extends(EachValidator, _super);

      function EachValidator(options) {
        this.attributes = Array.wrap(deleteObjectProperty(options, "attributes"));
        if (options["allowNil"]) {
          options["allowBlank"] = true;
        }
        if (options["allowBlank"]) {
          options["allowNil"] = true;
        }
        EachValidator.__super__.constructor.call(this, options);
        this.checkValitity();
      }

      EachValidator.prototype.validate = function(form) {
        var attribute, value, _i, _len, _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attribute = _ref[_i];
          value = form.field(attribute).value();
          if (isBlank(value) && this.options["allowBlank"]) {
            continue;
          }
          _results.push(this.validateEach(form, attribute, value));
        }
        return _results;
      };

      EachValidator.prototype.validateEach = function(record, attribute, value) {};

      EachValidator.prototype.checkValitity = function() {};

      return EachValidator;

    })($.FormCheck.Validator);
    $.FormCheck.prototype.validatesWith = function() {
      var options, validator, validatorKlass, validators, _i, _j, _len, _results;
      validators = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
      _results = [];
      for (_j = 0, _len = validators.length; _j < _len; _j++) {
        validatorKlass = validators[_j];
        validator = new validatorKlass(options);
        _results.push(this.validate(function(form) {
          return validator.validate(form);
        }));
      }
      return _results;
    };
    $.FormCheck.prototype.attributesForWith = function(attributes) {
      var options;
      options = attributes.extractOptions();
      return $.extend(options, {
        attributes: attributes
      });
    };
    $.FormCheck.Validator.create = function(name, object, base) {
      var className, validator;
      object = $.extend({
        constructor: function() {}
      }, object || {});
      if (base == null) {
        base = $.FormCheck.EachValidator;
      }
      className = name.camelize() + "Validator";
      validator = (function(_super) {

        __extends(validator, _super);

        function validator() {
          validator.__super__.constructor.apply(this, arguments);
          this.constructor.apply(this, arguments);
        }

        return validator;

      })(base);
      $.extend(validator.prototype, object);
      validator.kind = name;
      $.FormCheck.Validations[className] = validator;
      $.FormCheck.prototype["validates" + name + "Of"] = function() {
        var attributes;
        attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.validatesWith(validator, this.attributesForWith(attributes));
      };
      return validator;
    };
    $.FormCheck.Validations.BlockValidator = (function(_super) {

      __extends(BlockValidator, _super);

      function BlockValidator(options) {
        this.callback = deleteObjectProperty(options, 'callback') || $.noop;
        BlockValidator.__super__.constructor.call(this, options);
      }

      BlockValidator.prototype.validateEach = function(form, attribute, value) {
        return this.callback.call(this, form, attribute, value);
      };

      return BlockValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.prototype.validatesEach = function() {
      var attributes, options;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      options = this.attributesForWith(attributes);
      if ($.isFunction(options.attributes[options.attributes.length - 1])) {
        options.callback = attributes.pop();
      }
      return this.validatesWith($.FormCheck.Validations.BlockValidator, options);
    };
    $.FormCheck.Validations.AcceptanceValidator = (function(_super) {

      __extends(AcceptanceValidator, _super);

      function AcceptanceValidator(options) {
        AcceptanceValidator.__super__.constructor.call(this, $.extend({
          accept: '1'
        }, options));
      }

      AcceptanceValidator.prototype.validateEach = function(form, attribute, value) {
        if (value !== this.options.accept) {
          return form.errors.add(attribute, ":accepted", objectWithoutProperties(this.options, ['accept', 'allowNil']));
        }
      };

      return AcceptanceValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.AcceptanceValidator.kind = "acceptance";
    $.FormCheck.prototype.validatesAcceptanceOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.AcceptanceValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.ConfirmationValidator = (function(_super) {

      __extends(ConfirmationValidator, _super);

      function ConfirmationValidator() {
        return ConfirmationValidator.__super__.constructor.apply(this, arguments);
      }

      ConfirmationValidator.prototype.validateEach = function(form, attribute, value) {
        var confirmed, confirmedFieldName;
        confirmedFieldName = attribute + "_confirmation";
        confirmed = form.field(confirmedFieldName).value();
        if (value !== confirmed) {
          return form.errors.add(confirmedFieldName, ":confirmation", this.options);
        }
      };

      return ConfirmationValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.ConfirmationValidator.kind = "confirmation";
    $.FormCheck.prototype.validatesConfirmationOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.ConfirmationValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.ExclusionValidator = (function(_super) {

      __extends(ExclusionValidator, _super);

      function ExclusionValidator() {
        return ExclusionValidator.__super__.constructor.apply(this, arguments);
      }

      ExclusionValidator.prototype.validateEach = function(form, attribute, value) {
        if ($.inArray(value, this.options["in"]) > -1) {
          return form.errors.add(attribute, ":exclusion", $.extend(objectWithoutProperties(this.options, ['in']), {
            value: value
          }));
        }
      };

      return ExclusionValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.ExclusionValidator.kind = "exclusion";
    $.FormCheck.prototype.validatesExclusionOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.ExclusionValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.FormatValidator = (function(_super) {

      __extends(FormatValidator, _super);

      function FormatValidator(options) {
        var opt, _i, _len, _ref;
        _ref = ["with", "without"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          if ((options[opt] != null) && $.isString(options[opt])) {
            options[opt] = $.FormCheck.Validations.FormatValidator.FORMATS[options[opt]];
          }
        }
        FormatValidator.__super__.constructor.call(this, options);
      }

      FormatValidator.prototype.validateEach = function(form, attribute, value) {
        if (this.options["with"] && !((value + "").match(this.options["with"]))) {
          form.errors.add(attribute, ":invalid", $.extend(objectWithoutProperties(this.options, ['with']), {
            value: value
          }));
        }
        if (this.options["without"] && (value + "").match(this.options["without"])) {
          return form.errors.add(attribute, ":invalid", $.extend(objectWithoutProperties(this.options, ['without']), {
            value: value
          }));
        }
      };

      return FormatValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.FormatValidator.FORMATS = {
      email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
      url: /^[A-Za-z]+:\/\/[A-Za-z0-9-_]+(\.[a-zA-Z0-9]+)+(:\d+)?[A-Za-z0-9-_%&\?\/.=]+$/
    };
    $.FormCheck.Validations.FormatValidator.kind = "format";
    $.FormCheck.prototype.validatesFormatOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.FormatValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.InclusionValidator = (function(_super) {

      __extends(InclusionValidator, _super);

      function InclusionValidator() {
        return InclusionValidator.__super__.constructor.apply(this, arguments);
      }

      InclusionValidator.prototype.validateEach = function(form, attribute, value) {
        if ($.inArray(value, this.options["in"]) === -1) {
          return form.errors.add(attribute, ":inclusion", $.extend(objectWithoutProperties(this.options, ['in']), {
            value: value
          }));
        }
      };

      return InclusionValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.InclusionValidator.kind = "inclusion";
    $.FormCheck.prototype.validatesInclusionOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.InclusionValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.LengthValidator = (function(_super) {

      __extends(LengthValidator, _super);

      function LengthValidator(options) {
        LengthValidator.__super__.constructor.call(this, $.extend({
          tokenizer: $.FormCheck.Validations.LengthValidator.DEFAULT_TOKENIZER
        }, options));
      }

      LengthValidator.prototype.validateEach = function(form, attribute, value) {
        var _base, _base1, _base2, _ref, _ref1, _ref2;
        if ($.isString(value)) {
          value = this.options.tokenizer(value);
        }
        if (this.options["is"] && this.options["is"] !== value.length) {
          if (this.options["wrongLength"] != null) {
            if ((_ref = (_base = this.options)["message"]) == null) {
              _base["message"] = this.options["wrongLength"];
            }
          }
          form.errors.add(attribute, ":wrong_length", $.extend(objectWithoutProperties(this.options, $.FormCheck.Validations.LengthValidator.RESERVED_OPTIONS), {
            count: this.options["is"]
          }));
        }
        if (this.options["minimum"] && this.options["minimum"] > value.length) {
          if (this.options["tooShort"] != null) {
            if ((_ref1 = (_base1 = this.options)["message"]) == null) {
              _base1["message"] = this.options["tooShort"];
            }
          }
          form.errors.add(attribute, ":too_short", $.extend(objectWithoutProperties(this.options, $.FormCheck.Validations.LengthValidator.RESERVED_OPTIONS), {
            count: this.options["minimum"]
          }));
        }
        if (this.options["maximum"] && this.options["maximum"] < value.length) {
          if (this.options["tooLong"] != null) {
            if ((_ref2 = (_base2 = this.options)["message"]) == null) {
              _base2["message"] = this.options["tooLong"];
            }
          }
          return form.errors.add(attribute, ":too_long", $.extend(objectWithoutProperties(this.options, $.FormCheck.Validations.LengthValidator.RESERVED_OPTIONS), {
            count: this.options["maximum"]
          }));
        }
      };

      return LengthValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.LengthValidator.DEFAULT_TOKENIZER = function(value) {
      return value.split('');
    };
    $.FormCheck.Validations.LengthValidator.RESERVED_OPTIONS = ["minimum", "maximum", "is", "tokenizer", "tooLong", "tooShort"];
    $.FormCheck.Validations.LengthValidator.kind = "length";
    $.FormCheck.prototype.validatesLengthOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.LengthValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.NumericalityValidator = (function(_super) {

      __extends(NumericalityValidator, _super);

      function NumericalityValidator() {
        return NumericalityValidator.__super__.constructor.apply(this, arguments);
      }

      NumericalityValidator.prototype.validateEach = function(form, attribute, value) {
        var check, rawValue, val, _ref, _results;
        rawValue = value;
        value = parseFloat(value);
        if (isNaN(value) || !(rawValue.match(/\d+$/))) {
          form.errors.add(attribute, ":not_a_number", this.filteredOptions(rawValue));
          return;
        }
        if (this.options.onlyInteger && !(rawValue.match(/^[-]?\d+$/))) {
          form.errors.add(attribute, ":not_an_integer", this.filteredOptions(rawValue));
          return;
        } else {
          value = parseInt(value);
        }
        _ref = sliceObject(this.options, extractKeys($.FormCheck.Validations.NumericalityValidator.CHECKS));
        _results = [];
        for (check in _ref) {
          val = _ref[check];
          switch (check) {
            case "odd":
            case "even":
              if (!$.FormCheck.Validations.NumericalityValidator.CHECKS[check](value)) {
                _results.push(form.errors.add(attribute, ":" + check, this.filteredOptions(val)));
              } else {
                _results.push(void 0);
              }
              break;
            default:
              if (!$.FormCheck.Validations.NumericalityValidator.CHECKS[check](value, val)) {
                _results.push(form.errors.add(attribute, ":" + check.snakeCase(), this.filteredOptions(val)));
              } else {
                _results.push(void 0);
              }
          }
        }
        return _results;
      };

      NumericalityValidator.prototype.filteredOptions = function(value) {
        return $.extend(objectWithoutProperties(this.options, $.FormCheck.Validations.NumericalityValidator.RESERVED_OPTIONS), {
          count: value
        });
      };

      return NumericalityValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.NumericalityValidator.CHECKS = {
      greaterThan: function(a, b) {
        return a > b;
      },
      greaterThanOrEqualTo: function(a, b) {
        return a >= b;
      },
      equalTo: function(a, b) {
        return a === b;
      },
      lessThan: function(a, b) {
        return a < b;
      },
      lessThanOrEqualTo: function(a, b) {
        return a <= b;
      },
      odd: function(n) {
        return (n % 2) === 1;
      },
      even: function(n) {
        return (n % 2) === 0;
      }
    };
    $.FormCheck.Validations.NumericalityValidator.RESERVED_OPTIONS = extractKeys($.FormCheck.Validations.NumericalityValidator.CHECKS).concat(["onlyInteger"]);
    $.FormCheck.Validations.NumericalityValidator.kind = "numericality";
    $.FormCheck.prototype.validatesNumericalityOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.NumericalityValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.Validations.PresenceValidator = (function(_super) {

      __extends(PresenceValidator, _super);

      function PresenceValidator() {
        return PresenceValidator.__super__.constructor.apply(this, arguments);
      }

      PresenceValidator.prototype.validateEach = function(form, attribute, value) {
        if (isBlank(value)) {
          return form.errors.add(attribute, ":blank", this.options);
        }
      };

      return PresenceValidator;

    })($.FormCheck.EachValidator);
    $.FormCheck.Validations.PresenceValidator.kind = 'presence';
    $.FormCheck.prototype.validatesPresenceOf = function() {
      var attributes;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.validatesWith($.FormCheck.Validations.PresenceValidator, this.attributesForWith(attributes));
    };
    $.FormCheck.prototype.validates = function() {
      var attributes, currentOptions, defaults, kind, options, validations, validator, _results;
      attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      defaults = attributes.extractOptions();
      validations = sliceObjectAndRemove(defaults, ["if", "unless", "allowBlank", "allowNil"]);
      $.extend(defaults, {
        attributes: attributes
      });
      _results = [];
      for (kind in validations) {
        options = validations[kind];
        validator = $.FormCheck.findValidator(kind);
        currentOptions = $.extend({}, defaults);
        if (validator) {
          _results.push(this.validatesWith(validator, $.extend(currentOptions, $.FormCheck.parseValidatesOptions(options))));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return $.FormCheck.parseValidatesOptions = function(options) {
      if ($.isArray(options)) {
        return {
          "in": options
        };
      }
      if (options.test != null) {
        return {
          "with": options
        };
      }
      if (options === true) {
        return {};
      }
      if ($.isPlainObject) {
        return options;
      }
      return {};
    };
  })(jQuery);

}).call(this);

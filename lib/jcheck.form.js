// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    $.FormCheck = (function() {

      function FormCheck(form, options) {
        this.form = form;
        this.options = $.extend({
          preventSubmit: true,
          fieldPrefix: null,
          notifiers: $.FormCheck.defaultNotifiers,
          liveNotifiers: $.FormCheck.defaultLiveNotifiers,
          language: $.FormCheck.defaultLocale,
          autoParse: true,
          enabled: true
        }, options || {});
        this.fieldCache = {};
        this.errors = new $.FormCheck.Errors(this);
        this.validations = [];
        this.hookEvents();
        this.setupNotifiers();
        if (this.options.autoParse) {
          this.parseInlineValidations();
        }
      }

      FormCheck.prototype.parseInlineValidations = function() {
        var _this = this;
        return this.form.find(":input[data-validations]").each(function(index, element) {
          var e, fieldName, validations;
          e = $(element);
          fieldName = _this.parseFieldName(e);
          validations = _this.parseValidationString(e.attr("data-validations"));
          return _this.validates(fieldName, validations);
        });
      };

      FormCheck.prototype.parseValidationString = function(validationString) {
        var validations;
        validations = {};
        try {
          validations = eval("({" + validationString + "})");
        } catch (e) {
          console.error("can't parse \"" + validationString + "\"");
        }
        return validations;
      };

      FormCheck.prototype.hookEvents = function() {
        var self,
          _this = this;
        this.form.submit(function(e) {
          var notifier, _i, _len, _ref, _results;
          if (!_this.options.enabled) {
            return;
          }
          if (!_this.isValid()) {
            if (_this.options.preventSubmit) {
              e.preventDefault();
            }
            _ref = _this.notifiers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              notifier = _ref[_i];
              _results.push(notifier.notify());
            }
            return _results;
          }
        });
        self = this;
        return this.form.find(":input").each(function() {
          var field, name;
          name = self.parseFieldName($(this));
          if (name) {
            field = self.field(name);
            if (self.options.liveNotifiers) {
              return (function(el) {
                var f, n;
                n = name;
                f = field;
                el.focus(function(e) {
                  self.isValid();
                  return self.dispatchLiveNotifiers("focus", n, e, f.liveNotifiers);
                });
                return el.blur(function(e) {
                  self.isValid();
                  return self.dispatchLiveNotifiers("blur", n, e, f.liveNotifiers);
                });
              })($(this));
            }
          }
        });
      };

      FormCheck.prototype.dispatchLiveNotifiers = function(callback, attribute, event, notifiers) {
        var currentNotifiers, n, notifier, _i, _j, _len, _len1, _results;
        currentNotifiers = [];
        for (_i = 0, _len = notifiers.length; _i < _len; _i++) {
          n = notifiers[_i];
          if (n === ":parent") {
            currentNotifiers = currentNotifiers.concat(this.liveNotifiers);
          } else {
            currentNotifiers.push(this.getNotifier(n));
          }
        }
        _results = [];
        for (_j = 0, _len1 = currentNotifiers.length; _j < _len1; _j++) {
          notifier = currentNotifiers[_j];
          _results.push(notifier[callback](attribute, event));
        }
        return _results;
      };

      FormCheck.prototype.setupNotifiers = function() {
        var kind, type, _i, _len, _ref, _results;
        _ref = ["notifiers", "liveNotifiers"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          this[type] = [];
          if (this.options[type]) {
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = this.options[type];
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                kind = _ref1[_j];
                _results1.push(this[type] = this.getNotifier(kind));
              }
              return _results1;
            }).call(this));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      FormCheck.prototype.getNotifier = function(notifier) {
        var creator, notifierClass, parameters;
        parameters = [this];
        if ($.isArray(notifier)) {
          parameters = parameters.concat(notifier.slice(1));
          notifier = notifier[0];
        }
        if ($.isString(notifier)) {
          notifierClass = $.FormCheck.findNotifier(notifier);
          creator = function() {
            return notifierClass.apply(this, parameters);
          };
          creator.prototype = notifierClass.prototype;
          return new creator();
        } else {
          notifier.form = this;
          return notifier;
        }
      };

      FormCheck.prototype.validate = function(validator) {
        return this.validations.push(validator);
      };

      FormCheck.prototype.field = function(name) {
        var _base, _ref;
        if ((_ref = (_base = this.fieldCache)[name]) == null) {
          _base[name] = new $.FormCheck.Field(this, this.fieldName(name), name);
        }
        return this.fieldCache[name];
      };

      FormCheck.prototype.isValid = function(triggerNotifiers) {
        var notifier, valid, validation, _i, _j, _len, _len1, _ref, _ref1;
        if (triggerNotifiers == null) {
          triggerNotifiers = false;
        }
        this.errors.clear();
        _ref = this.validations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          validation = _ref[_i];
          validation(this);
        }
        valid = this.errors.size() === 0;
        if (triggerNotifiers && !valid) {
          _ref1 = this.notifiers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            notifier = _ref1[_j];
            notifier.notify();
          }
        }
        return valid;
      };

      FormCheck.prototype.parseFieldName = function(input) {
        var name;
        name = input.attr("name");
        if (!name) {
          return null;
        }
        return this.reverseFieldName(name);
      };

      FormCheck.prototype.reverseFieldName = function(name) {
        var matches;
        if (this.options.fieldPrefix) {
          if (matches = name.match(new RegExp("" + this.options.fieldPrefix + "\\[(.+?)\\](.*)"))) {
            name = matches[1] + (matches[2] || "");
          } else {
            name = ":" + name;
          }
        }
        return name;
      };

      FormCheck.prototype.fieldName = function(name) {
        var matches, subparts;
        if (matches = name.match(/^:(.+)/)) {
          return matches[1];
        }
        if (this.options.fieldPrefix) {
          subparts = "";
          if (matches = name.match(/(.+?)(\[.+)$/)) {
            name = matches[1];
            subparts = matches[2];
          }
          return "" + this.options.fieldPrefix + "[" + name + "]" + subparts;
        } else {
          return name;
        }
      };

      FormCheck.prototype.disable = function() {
        return this.options.enabled = false;
      };

      FormCheck.prototype.enable = function() {
        return this.options.enabled = true;
      };

      return FormCheck;

    })();
    $.FormCheck.defaultLocale = "en";
    $.FormCheck.defaultNotifiers = ["notificationDialog"];
    $.FormCheck.defaultLiveNotifiers = ["tipBalloons"];
    $.FormCheck.Field = (function() {

      function Field(form, name, attribute) {
        var evt, _i, _len, _ref,
          _this = this;
        this.formChecker = form;
        this.fieldName = name;
        this.attribute = attribute;
        this.liveNotifiers = [":parent"];
        this.element = this.formChecker.form.find(":input[name='" + name + "']");
        this.customLabel = null;
        if (this.formChecker.options.liveNotifiers) {
          _ref = this.eventsForElement();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            evt = _ref[_i];
            this.element[evt](function(e) {
              _this.formChecker.isValid();
              return _this.formChecker.dispatchLiveNotifiers("notify", _this.attribute, e, _this.liveNotifiers);
            });
          }
        }
      }

      Field.prototype.eventsForElement = function() {
        if (this.element.length === 0) {
          return [];
        }
        if (this.element.attr("type") === "radio" || this.element.attr("type") === "checkbox") {
          return ["change"];
        }
        if (this.element[0].tagName.toLowerCase() === "select") {
          return ["keyup", "change"];
        }
        return ["keyup"];
      };

      Field.prototype.value = function() {
        if (this.element.attr("type") === "radio") {
          return this.valueForRadio();
        }
        if (this.element.attr("type") === "checkbox") {
          return this.valueForCheckbox();
        }
        return this.valueForText();
      };

      Field.prototype.valueForText = function() {
        return this.element.val() || "";
      };

      Field.prototype.valueForRadio = function() {
        return this.element.filter(":checked").val() || "";
      };

      Field.prototype.valueForCheckbox = function() {
        if (this.element.length > 1) {
          return $.makeArray(this.element.filter(":checked").map(function() {
            return $(this).val();
          }));
        } else {
          if (this.element[0].checked) {
            return this.element.val();
          } else {
            return "";
          }
        }
      };

      Field.prototype.label = function() {
        var fieldId, labelElement, matches;
        if (this.customLabel !== null) {
          if ($.isFunction(this.customLabel)) {
            return this.customLabel.call(this);
          } else {
            return this.customLabel;
          }
        }
        fieldId = this.element.attr("id");
        if (this.element.length > 1) {
          if (matches = fieldId.match(/(.+)_.+$/)) {
            fieldId = matches[1];
          }
        }
        labelElement = this.formChecker.form.find("label[for='" + fieldId + "']");
        if (labelElement.length > 0) {
          return labelElement.text();
        } else {
          return this.fieldName;
        }
      };

      return Field;

    })();
    $.fn.jcheck = function(options) {
      return new $.FormCheck($(this), options || {});
    };
    return $(function() {
      return $("form[data-jcheck=true]").jcheck();
    });
  })(jQuery);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery;

  $.FormCheck = (function() {
    function FormCheck(form, options) {
      this.form = form;
      this.options = $.extend({
        prevent_submit: true,
        field_prefix: null,
        notifiers: $.FormCheck.default_notifiers,
        live_notifiers: $.FormCheck.default_live_notifiers,
        language: $.FormCheck.default_locale
      }, options || {});
      this.field_cache = {};
      this.errors = new $.FormCheck.Errors(this);
      this.validations = [];
      this.hook_events();
      this.setup_notifiers();
    }

    FormCheck.prototype.hook_events = function() {
      var self,
        _this = this;
      this.form.submit(function(e) {
        var notifier, _i, _len, _ref, _results;
        if (!_this.is_valid()) {
          if (_this.options.prevent_submit) {
            e.preventDefault();
          }
          _ref = _this.notifiers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            notifier = _ref[_i];
            _results.push(notifier.notify());
          }
          return _results;
        }
      });
      self = this;
      return this.form.find(":input").each(function() {
        var field, name;
        name = self.parse_field_name($(this));
        if (name) {
          field = self.field(name);
          if (self.options.live_notifiers) {
            return (function(el) {
              var f, n;
              n = name;
              f = field;
              el.focus(function(e) {
                self.is_valid();
                return self.dispatch_live_notifiers("focus", n, e, f.live_notifiers);
              });
              return el.blur(function(e) {
                self.is_valid();
                return self.dispatch_live_notifiers("blur", n, e, f.live_notifiers);
              });
            })($(this));
          }
        }
      });
    };

    FormCheck.prototype.dispatch_live_notifiers = function(callback, attribute, event, notifiers) {
      var current_notifiers, n, notifier, _i, _j, _len, _len1, _results;
      current_notifiers = [];
      for (_i = 0, _len = notifiers.length; _i < _len; _i++) {
        n = notifiers[_i];
        if (n === ":parent") {
          current_notifiers = current_notifiers.concat(this.live_notifiers);
        } else {
          current_notifiers.push(this.get_notifier(n));
        }
      }
      _results = [];
      for (_j = 0, _len1 = current_notifiers.length; _j < _len1; _j++) {
        notifier = current_notifiers[_j];
        _results.push(notifier[callback](attribute, event));
      }
      return _results;
    };

    FormCheck.prototype.setup_notifiers = function() {
      var kind, type, _i, _len, _ref, _results;
      _ref = ["notifiers", "live_notifiers"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        this[type] = [];
        if (this.options[type]) {
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = this.options[type];
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              kind = _ref1[_j];
              _results1.push(this[type] = this.get_notifier(kind));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FormCheck.prototype.get_notifier = function(notifier) {
      var creator, notifier_class, parameters;
      parameters = [this];
      if ($.isArray(notifier)) {
        parameters = parameters.concat(notifier.slice(1));
        notifier = notifier[0];
      }
      if ($.isString(notifier)) {
        notifier_class = $.FormCheck.find_notifier(notifier);
        creator = function() {
          return notifier_class.apply(this, parameters);
        };
        creator.prototype = notifier_class.prototype;
        return new creator();
      } else {
        notifier.form = this;
        return notifier;
      }
    };

    FormCheck.prototype.validate = function(validator) {
      return this.validations.push(validator);
    };

    FormCheck.prototype.field = function(name) {
      var _base;
      if ((_base = this.field_cache)[name] == null) {
        _base[name] = new $.FormCheck.Field(this, this.field_name(name), name);
      }
      return this.field_cache[name];
    };

    FormCheck.prototype.is_valid = function() {
      var validation, _i, _len, _ref;
      this.errors.clear();
      _ref = this.validations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        validation = _ref[_i];
        validation(this);
      }
      return this.errors.size() === 0;
    };

    FormCheck.prototype.parse_field_name = function(input) {
      var name;
      name = input.attr("name");
      if (!name) {
        return null;
      }
      return this.reverse_field_name(name);
    };

    FormCheck.prototype.reverse_field_name = function(name) {
      var matches;
      if (this.options.field_prefix) {
        if (matches = name.match(new RegExp("" + this.options.field_prefix + "\\[(.+?)\\](.*)"))) {
          name = matches[1] + (matches[2] || "");
        } else {
          name = ":" + name;
        }
      }
      return name;
    };

    FormCheck.prototype.field_name = function(name) {
      var matches, subparts;
      if (matches = name.match(/^:(.+)/)) {
        return matches[1];
      }
      if (this.options.field_prefix) {
        subparts = "";
        if (matches = name.match(/(.+?)(\[.+)$/)) {
          name = matches[1];
          subparts = matches[2];
        }
        return "" + this.options.field_prefix + "[" + name + "]" + subparts;
      } else {
        return name;
      }
    };

    return FormCheck;

  })();

  $.FormCheck.default_locale = "en";

  $.FormCheck.default_notifiers = ["notification_dialog"];

  $.FormCheck.default_live_notifiers = ["tip_balloons"];

  $.FormCheck.Field = (function() {
    function Field(form, name, attribute) {
      var evt, _i, _len, _ref,
        _this = this;
      this.form_checker = form;
      this.field_name = name;
      this.attribute = attribute;
      this.live_notifiers = [":parent"];
      this.element = this.form_checker.form.find(":input[name='" + name + "']");
      this.custom_label = null;
      if (this.form_checker.options.live_notifiers) {
        _ref = this.events_for_element();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          evt = _ref[_i];
          this.element[evt](function(e) {
            _this.form_checker.is_valid();
            return _this.form_checker.dispatch_live_notifiers("notify", _this.attribute, e, _this.live_notifiers);
          });
        }
      }
    }

    Field.prototype.events_for_element = function() {
      if (this.element.length === 0) {
        return [];
      }
      if (this.element.attr("type") === "radio" || this.element.attr("type") === "checkbox") {
        return ["change"];
      }
      if (this.element[0].tagName.toLowerCase() === "select") {
        return ["keyup", "change"];
      }
      return ["keyup"];
    };

    Field.prototype.value = function() {
      if (this.element.attr("type") === "radio") {
        return this.value_for_radio();
      }
      if (this.element.attr("type") === "checkbox") {
        return this.value_for_checkbox();
      }
      return this.value_for_text();
    };

    Field.prototype.value_for_text = function() {
      return this.element.val() || "";
    };

    Field.prototype.value_for_radio = function() {
      return this.element.filter(":checked").val() || "";
    };

    Field.prototype.value_for_checkbox = function() {
      if (this.element.length > 1) {
        return $.makeArray(this.element.filter(":checked").map(function() {
          return $(this).val();
        }));
      } else {
        if (this.element[0].checked) {
          return this.element.val();
        } else {
          return "";
        }
      }
    };

    Field.prototype.label = function() {
      var field_id, label_element, matches;
      if (this.custom_label !== null) {
        if ($.isFunction(this.custom_label)) {
          return this.custom_label.call(this);
        } else {
          return this.custom_label;
        }
      }
      field_id = this.element.attr("id");
      if (this.element.length > 1) {
        if (matches = field_id.match(/(.+)_.+$/)) {
          field_id = matches[1];
        }
      }
      label_element = this.form_checker.form.find("label[for='" + field_id + "']");
      if (label_element.length > 0) {
        return label_element.text();
      } else {
        return this.field_name;
      }
    };

    return Field;

  })();

  $.fn.jcheck = function(options) {
    return new $.FormCheck($(this), options || {});
  };

}).call(this);
